import streamlit as st
from streamlit_option_menu import option_menu
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import pandas as pd
import json
import os
import datetime

cloud_config= {
  'secure_connect_bundle': 'secure-connect-doanbigdata.zip'
}
# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below

astra_token = st.secrets["ASTRA_DB_TOKEN"]
astra_token_dict = json.loads(astra_token)

CLIENT_ID = astra_token_dict["clientId"]
CLIENT_SECRET = astra_token_dict["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()
session.set_keyspace('doanbigdata')

# Giao di·ªán Streamlit
st.title("üìä H·ªá th·ªëng gi√°m s√°t √¥ nhi·ªÖm kh√¥ng kh√≠")
st.write("D·ªØ li·ªáu ƒë∆∞·ª£c l·∫•y t·ª´ b·∫£ng air_quality trong Cassandra")

with st.sidebar:
    selected = option_menu(
        menu_title="Filter Data",
        options=["Date", "CO(GT)", "NOx(GT)", "NO2(GT)", "PT08.S1(CO)", "PT08.S2(NMHC)", "PT08.S3(NOx)", "PT08.S4(NO2)", "PT08.S5(O3)", "T", "RH", "AH"],
        default_index=0,
        orientation="vertical",
    )
if selected == "Date":
    st.subheader("L·ªçc d·ªØ li·ªáu theo ng√†y")
    start_date = st.date_input("Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu", datetime.date(2004, 3, 10), min_value=datetime.date(2004, 3, 10), max_value=datetime.date(2005, 4, 4))
    end_date = st.date_input("Ch·ªçn ng√†y k·∫øt th√∫c", datetime.date(2004, 3, 10), min_value=datetime.date(2004, 3, 10), max_value=datetime.date(2005, 4, 4))
    if st.button("L·ªçc d·ªØ li·ªáu"):
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán l·ªçc
        if start_date > end_date:
            st.error("Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c")
        if start_date <= end_date:
            #st.subheader(f"Du lieu tu ngay {start_date} den ngay {end_date}")
            query = f"SELECT * FROM air_quality WHERE date >= '{start_date}' AND date <= '{end_date}' ALLOW FILTERING"
            # Th·ª±c thi truy v·∫•n
            rows = session.execute(query)
            df = pd.DataFrame(rows)
            # Hi·ªÉn th·ªã d·ªØ li·ªáu
            st.dataframe(df)
        else:
            st.error("Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c")
    if st.button("Reset", type="primary"):
        pass

if selected == "CO(GT)":
    selected = option_menu(
        menu_title=None,
        options=["Kho·∫£ng gi√° tr·ªã", "Gi√° tr·ªã c·ªë ƒë·ªãnh"],
        default_index=0,
        orientation="horizontal",
    )
    if selected == "Kho·∫£ng gi√° tr·ªã":
        st.subheader("L·ªçc d·ªØ li·ªáu theo kho·∫£ng gi√° tr·ªã CO(GT)")
        co = st.slider("Ch·ªçn kho·∫£ng gi√° tr·ªã CO(GT)", min_value=0.0, max_value=12.0, value=(0.0, 12.0), step=0.1)
        if st.button("L·ªçc d·ªØ li·ªáu"):
            #st.subheader(f"Du lieu co gia tri CO(GT) tu {co[0]} den {co[1]}")
            query = f"SELECT * FROM air_quality WHERE co_gt > {co[0]} AND co_gt < {co[1]} ALLOW FILTERING"
            rows = session.execute(query)
            df = pd.DataFrame(rows)
            st.dataframe(df)
        if st.button("Reset", type="primary"):
            pass
    if selected == "Gi√° tr·ªã c·ªë ƒë·ªãnh":
        st.subheader("L·ªçc d·ªØ li·ªáu theo gi√° tr·ªã CO(GT)")
        co = st.text_input("Ch·ªçn gi√° tr·ªã CO(GT)", value="0.1")
        co = float(co)
        if st.button("L·ªçc d·ªØ li·ªáu"):
            if co >= 0:
                #st.subheader(f"Du lieu co gia tri CO(GT) la {co}")
                query = f"SELECT * FROM air_quality WHERE co_gt = {co} ALLOW FILTERING"
                rows = session.execute(query)
                df = pd.DataFrame(rows)
                st.dataframe(df)
            else:
                st.error("Gi√° tr·ªã CO kh√¥ng th·ªÉ b√© h∆°n 0")
        if st.button("Reset", type="primary"):
            pass